=head1  Migrating From Version 2 to Version 3

=head1 Prerequisites

=head2 Unchanged From Version 2.x

   * L<CPAN> (1.9205)
   * L<Apache::Session> (1.6)
   * L<Config::General> (2.27)
   * L<Digest::MD5> (2.36)
   * L<Email::Valid> (0.15)
   * L<File::Pid> (1.01)
   * L<HTML::Template> (2.7)
   * L<Time::HiRes> (1.65)
   * L<XML::Checker::Parser>

=head2 New in 3.x

   * L<Devel::StackTrace> (1.20)
   * L<Exception::Class> (1.26)
   * L<Exception::Class::DBI> (1.00)
   * L<JSON::DWIW> (0.32),
   * L<Proc::UID> (0.05)

=head2 Removed from 3.x

   * L<Apache::DBI> (superseded by DBI-E<gt>connect_cached)
   * L<IPC::SharedCache> (1.3)

=head2 Optional

   * L<Log::Log4perl> (1.23) if you want to use the new Log4perl debugging backend
   * L<SOAP::Lite> (0.710) if you want to server SOAP requests with Apache::Voodoo

=head1 Updating the Apache Configuration

The old Apache configuration access Voodoo through the procedural interface, the new configuration uses the object interface. Replace each occurrence of

	SetHandler perl-script
	PerlHandler Apache::Voodoo::Handler

with

	SetHandler modperl
	PerlResponseHandler $Apache::Voodoo::Handler->handler

and then either inside a C<< <Perl> >> configuration block or your F<modperl-startup.pl> file add

	$Apache::Voodoo::Handler = Apache::Voodoo::Handler->new();

=head1 Using the New Debugging Tools

The new debugging tools support multiple debugging backends, Native (V2 style), 
FirePHP, and Log4perl. You can can mix and match which debugging system you want to use and
control the behavior of each individually. As a side effect, the C<debug> flag in F<voodoo.conf>
is no longer a boolean, but a block. For sake of backwards compatibility, C<debug=1> enables 
Native and FirePHP in log everything mode, C<debug=0> disable all debugging.

C<debug=1> is equivalent to:

	<debug>
		<FirePHP>
			debug     = 1
			info      = 1
			warn      = 1
			error     = 1
			exception = 1
			table     = 1
			trace     = 1
		</FirePHP>
	
		<Native>
			debug     = 1
			info      = 1
			warn      = 1
			error     = 1
			exception = 1
			table     = 1
			trace     = 1
			
			profile = 1
			params  = 1
			return_data  = 1
			template_conf  = 1
			params  = 1
			session = 1
		</Native>
	</debug>

=head2 Native

Due to the expanding use of AJAX in web development, simply injecting the debugging messages 
into the generated HTML was no longer a viable option. That technique basically left you blind 
to what was going on server side with your AJAX requests, (or anything with didn't generate 
HTML for that matter). Since one action in the UI might trigger multiple AJAX requests, it 
became necessary to save the debugging information across multiple requests, and display it later.

Native debugging does this by writing it to either to a SQLlite or MySQL database. A separate
apache handler handles the display of the captured data.

=head3 Configuring Voodoo

First voodoo needs to told how where the debug database is going to stored. Execute 
B<voodoo-control setconfig> and set the values of C<Debug DB Connection>, C<Debug DB Username>,
C<Debug DB Password>, and C<Debug URL Path>. The first three are the parameters are passed 
to C<< DBI->connect >> to establish the connection the debugging database. C<Debug URL Path>
tells the debug panel where on the server the debug handler is setup. For example:

	Debug DB Connection: dbi:SQLite:dbname=/tmp/apachevoodoo.db
	  Debug DB Username:
	  Debug DB Password:
	     Debug URL Path: /debug

uses a local SQLite database to store the debugging information. If you use MySQL for storage,
give each instance of Apache its database; don't try sharing the same one.

=head3 Configure Apache

	use Apache::Voodoo::Debug::Handler;
	$Apache::Voodoo::Debug = Apache::Voodoo::Debug::Handler->new();

If you have multiple vhosts running Apache::Voodoo add the following block I<*outside*> of 
the vhost configuration to enable it for all the vhosts at once. If you only have one vhost
running Apache::Voodoo then place this inside the vhost configuration block so that it is
only enabled for that vhost.

	<Location /debug>
		SetHandler modperl
		PerlResponseHandler $Apache::Voodoo::Debug->handler
		Order allow,deny
		Allow from all
		Deny from none
	</Location>


I<*Note:*> you can set the C<Order>, C<Allow>, and C<Deny> params to whatever is appropriate 
for your environment.

=head2 FirePHP

FirePHP makes your debugging messages appear in the FirePHP plugin for Firefox.

=head2 Log4perl

%INCLUDE{"L<Apache::Voodoo::DebuggingTools>" section="Log4perl"}%

=head1 Deprecated Things

Exception handling via L<Exception::Class::DBI> has been enable for DBI, therefore
C<db_error()> doesn't do anything useful anymore and can be omitted from now on.

