=head1 Methods provided by the Apache::Voodoo base class

=head1 init()

Since the new() method is reserved for some Voodoo specific black magic, you may
add the init() method in your modules to do basically the same sorts of things that you
would normally do inside a new().  For example:

	sub init {
	    my $self = shift;
	    $self->{'some_private_var'} = 'SOME VALUE';
	}

=head1 Debugging

With the exception of C<exception()>, these methods silently do nothing if debugging is not enabled.  Further, the
methods all behave the same way regardless of which debugging backends are enabled, or how they are configured.  
Thus you are free to use any of these in your code without any concern for how debugging has been configured.

For specifics on configuring the various backends see L<Apache::Voodoo::DebuggingTools>

=head2 debug(), info(), warn(), error()

Each of these take any number of parameters and produces a debug message at the given logging level.
They each use L<Data::Dumper> internally so you can pass it any type of parameter.

Examples:

	$self->debug("The contents of $p is:",$p);
	$self->info("What's in this object?",$some_object);
	$self->warn("Something is suspicious in here",\@some_array,\%some_hash);
	$self->error("Something went wrong:",$!);

=head2 exception($string)

Causes these immediate termination of the running program. Displays a stack trace with C<$string> as the error message.

	$self->exeception("You can't have cake! You didn't eat your pudding.");

=head2 trace($string)

Displays a stack trace of the running program using C<$string> as the description. The effect is similar to
C<exception()> except that it does I<not> cause the program to terminate.

=head2 table($string,$array_ref)

If you're trying to examine the contents of a sql result set, or and array-of-arrays, it is often helpful to view that
as a grid instead of the format that L<Data::Dumper> produces.  C<table()> does just that.  The first parameter sets 
the caption on the table, the second is the data to display.

Example:

	my $res = $p->{dbh}->selectall_arrayref("SELECT foo, bar, baz FROM qux");
	$self->table("data from qux",$res);

=head2 mark($message)

Optionally appends a L<Time::HiRes> time stamp to the 'Generation Time' section of the Debug block.
Messages can be turn on or off globally using the Debug option of the configuration.

	$self->mark('descriptive message about this point in the code');

Example:

	$self->mark('Start of big nasty loop');
	foreach (@lots_of_stuff) {
	    # do stuff
	}
	$self->mark('End of big nasty loop');


=head1 Browser Redirection


=head2 access_denied([$error],[$url])

By default it redirects to /access_denied which should contain some appropriate
access denied message.  If there is a handler associated with that page, the optional
C<$error> parameter can by used to proved the handling module with some additional information.
The optional C<$url> parameter can be used to have the user redirected somewhere else besides the default
location.  If the second param is not used and the access_denied template does not exist,
then the standard Apache C<403 (Forbidden)> is returned to the user.

	return $self->access_denied;

or

	return $self->access_denied('need_user_privilege');

or

	return $self->access_denied('need_user_privilege', '/user/access_denied');


=head2 display_error($error,$url)

Redirects the user to a generic error message display page.

	return $self->display_error('stuff went bang!','/index');

=head2 history($voodo_session,$index)

Voodoo keeps a running list of the last 10 URLs visited in the current session. This method provides access to that list.  
C<$index = 0> is the current page, C<$index = 1> is the page before this one.  Successive requests to the same page with 
different parameters DOES NOT add a new entry to this history, rather it only updates the URL parameters for that entry in
the history.  For example, if you click the 'next' link in paginated result set 10 times, the history doesn't contain 10
entries for each of those pages.

	$url = $self->history($p->{'session'},3);

=head2 tardis($p, $url1, [$url2, ...] )

Often within a website there is the need to go back to a previous page that the user has already visited.  For example 
the page that let's you view a record contains an 'edit' link for that record.  After the edit has finished, odds are 
you'd want to send the user back to that view page.  This can quickly lead to a lot of tedious parameter management 
for those return-to pages. Plus there may be more than one entry point for the current module only adding to the 
complexity.  C<tardis> provides a convenient way search the history for a set of URLs and redirect the user back to 
the first one it finds.

The URLs must contain the full path, relative URLs don't work.  You do not need to specify the parameters for 
that page, in fact doing so would kinda defeat the point :)

If no history items match, it redirects to the previously accessed URL.

	return $self->tardis($p,'/first/url/no_params','/second/url/no_params');

For example: C</admin/view_user> and C</admin/list_user> contain a link to the edit command.  Each takes different 
parameters and the user could have been on either before clicking the edit link.

Your edit method could look like this:

	sub edit {
	    my $self = shift;
	    my $p = shift;
	
	    # do some stuff
	
	    return $self->tardis($p,'/admin/view_user','/admin/list_user');
	}

You no longer have to figure out which link they came from, and what parameters they were using at the time.

=head2 redirect($url)

Redirects the user to the given URL. These may be absolute or relative

	return $self->redirect('/some/url');

=head1 Data Manipulation


=head2 prep_select($array_of_arrays, [ $selected_value ] )

Ever notice how when you're making select lists or lists of radio buttons that you end up doing 95% of them
exactly the same way?  This method does the HTML::Template-ifying of the data for you for those 95% cases.

	$return->{'my_list' = $self->prep_select(
	    [
	        [ $id_value,  $select_label  ],
	        [ $id_value2, $select_label2 ], ...
	    ],
	    $id_value_to_mark_selected
	);

or

	$return->{'my_list' = $self->prep_select(
	    [
	        [ $id_value,  $select_label  ],
	        [ $id_value2, $select_label2 ], ...
	    ],
	    [ $selected_id1, $select_id2, ... ]
	);


corresponding L<HTML::Template> for select lists (lines broken up for clarity):

	<select name="my_list">
	<tmpl_loop my_list>
	    <option
	        value="<tmpl_var ID>"
	        <tmpl_if SELECTED>selected</tmpl_if>
	    >
	    <tmpl_var NAME>
	    </option>
	</tmpl_loop>
	</select>


corresponding L<HTML::Template> for radio buttons:

	<tmpl_loop my_list>
	    <input
	        type="radio"
	        name="my_list"
	        value="<tmpl_var ID>"
	        <tmpl_if SELECTED>checked</tmpl_if>
	    />
	    <tmpl_var NAME>
	</tmpl_loop>


=head2 trim($string)

Removes leading and trailing whitespace

	$value = $self->trim("  <-- these spaces will be removed -->  ");

=head2 raw_mode($content_type,$contents, [ \%optional_http_headers ] )

This method is used to bypass the normal templating subsystem and allows the 'contents'
to be streamed directly to the browser.  Useful for generating CSVs and binary data
from within Voodoo.

	return $self->raw_mode(
	    'text/csv',
	    $contents,
	    {
	        'Content-disposition' => "attachment;filename=SomeFile.csv"
	    }
	);

=head2 last_insert_id()

Returns the value of the last auto_increment id in MySQL

