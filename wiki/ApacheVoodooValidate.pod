=head1  Using Apache::Voodoo::Validate


=head1 Overview


	my $validator = Apache::Voodoo::Validate->new({
	    'a_required_string' => {
	        'type' => 'varchar',
	        'length' => '10',
	        'required' => 1
	     },
	     'an_unsigned_int' => {
	         'type' => 'unsigned_int',
	         'bytes' => 2
	     }
	});
	
	my ($values,$errors) = $validator->validate({
	    a_required_string => 'a string',
	    an_unsigned_int => 100,
	    some_random_param => 'that will get ignored completely'
	});
	
	if (defined($errors)) {
	   foreach (keys %{$errors}) {
	       warn "error: $_";
	   }
	}
	else {
	   do_something_with($values->{a_required_string});
	   do_something_else_with($values->{an_unsigned_int});
	}


Apache::Voodoo::Validate provides a way to simplify parameter validation according to a given set of rules rather than spending a lot of time writing and debugging data validation code by hand.  The basic idea is shown above.  The constructor takes a hash reference where the keys are the parameter names and the values describe the validation rules.  The C<validate> method takes a hash reference of the parameters to be validated.  If all the parameters are valid it returns a single hash reference containing the valid values.  If any of the parameters fail validation, a second hash reference is returned which contains the failures.

=head1 new($configuration_hashref)


=head1 validate($parameters_hashref)

Takes a hash reference of the parameters to be validated.  If all the parameters are valid it returns a single hash reference containing the valid values.  If any of the parameters fail validation, a second hash reference is returned (in addition to the first) which contains the failures.

The valid values are returned in much the same way as they were passed in with a couple of exceptions as noted in their respective data types below.  In call cases leading and trailing white space is removed and ignored when doing any validation.  Additionally, if a field is defined as allowing multiple values, the returned value for it will *always* be an array reference regardless of if C<validate> only passed a single value for it.

The errors hash reference contains keys which represent the various failures.  The keys are of the form C<Failure Type_Parameter Name>.  For example a required field named C<foo> which was not defined would produce a key in the hash called C<MISSING_foo>.  There are different failure types depending on the data type.  See the Data Types section below.  The default error formatting style can be overridden via the C<set_error_formatter> method.

=head1 set_valid_callback($subroutine_reference)

This allows you to set a call back which gets called at the end of the normal validation sequence.  This allows you to do any cross field validation at the end.  The subroutine is given a hash reference of the *valid* parameters, and a hash reference of the current errors.  It is expected to return a array of failures where each element is an array with the field name and failure type.

For example, let's assume we want to do two trivial cross field validations:
   * We're doing the typical "enter your password twice" form and so we have 'password' and 'password_confirm' fields which must be equal.
   * We want to require that the 'state' field is supplied if the 'country' field contains 'USA'.


	my $validator = Apache::Voodoo::Validate->new({
	    password => {
	        type   => 'varchar',
	        length => 64,
	        required => 1
	    },
	    confirm_password => {
	        type   => 'varchar',
	        length => 64,
	        required => 1
	    },
	    state => {
	        type => 'varchar',
	        length => 10
	    },
	    country => {
	        type => 'varchar',
	        length => 10,
	        required => 1
	    }
	});
	
	$validator->set_valid_callback(sub {
	    my ($params,$error) = @_;
	
	    my @e;
	    if (defined($params->{password}) && $params->{password} ne $params->{confim_password}) {
	        push(@e,['password','NOMATCH']);
	    }
	    
	    if ($params->{country} eq "USA" and !defined($params->{state})) {
	        push(@e,['state','MISSING']);
	    }
	    return @e;
	});


There are two reason that we don't simply modify the C<$error> hash even though we could.  First, we want to let the error formatter add the entry into the C<$error> hash for us so that we don't replicate that logic.  Second, and more importantly, if a field has an error it needs to be removed from C<$params> so that the first hash reference returned by C<validate()> consistently contains only good data.

=head1 set_error_formatter($subroutine_reference)

Allows you to override the default way that errors appear inside the C<$errors> hash reference returned by C<validate()>.  The subroutine is passed three parameters:
   * The field which failed validation
   * The type of failure
   * The errors hash reference that will be returned by validate.  Add your error to this however you like.

For example the default error formatter looks like this:

	sub {
	   my ($field,$failure,$errors) = @_;
	   $errors->{$failure . '_' . $field} = 1;
	}


=head1 Data Types

All data types share a couple of common configuration parameters.
   * C<required>: causes the parameter to be required.  Fails with the type C<MISSING>.
   * C<valid>: takes a subroutine reference which is used to validate the parameter.  The subroutine is passed the parameter as the first argument and is expected to return 1 if the value is ok.  C<undef> or 0 causes the default failure type of C<BAD> to be used.  Anything else is used as the error name.
   * C<multiple>: allows the parameter to be an array reference of values each of which are validated in turn. *note* if this enabled, the value will *always* be returned as an array reference even if only one value was given.  Conversely if multiple is not set and the parameter is an array reference, only index 0 is validated and is returned as a scalar.

Each type (with the exception of text) has some form of length or size checking parameter which must be defined; no L<I can has|Wikipedia:I_Can_Has_Cheezburger> L<buffer overflow|Wikipedia:Buffer_overflow>.

=head2 varchar, text

   * C<length>: maximum length of the string.  0 for unlimited. Fails with the type C<BIG>.
   * C<valid>: in addition to the common behaviour of C<valid> listed above, there are two key words which can be used.
      * C<email>: uses CPAN:Email::Valid to check that the value is valid email address. Fails with the type C<BAD>.
      * C<url>: checks to see that the value is a http or https URL. Fails with the type C<BAD>.
   * C<regexp>: requires that the text matches the given regular expression pattern.  Fails with the type C<BAD>.

*note:* C<text> behaves exactly like C<varchar> except that there is no length checking.

=head2 unsigned_int

   * C<bytes>: sets the maximum allowed value of the integer in bytes.  In other words setting bytes to 2 restricts the value to between 0 and 65535.
   * C<max>: sets the maximum allowed value of the integer.

Fails with type C<BAD> if what is passed isn't and unsigned integer, or fails with type C<MAX> if the value is too large.  Either C<bytes> or C<max> must be set.  C<bytes> takes precedence if both are set.

=head2 signed_int

   * C<bytes>: sets the maximum allowed value of the integer in bytes.  In other words setting bytes to 2 restricts the value to between -32768 and 32767.
   * C<min>: sets the minimum allowed value of the integer.
   * C<max>: sets the maximum allowed value of the integer.

Fails with type C<BAD> if what is passed isn't an integer, fails with type C<MAX> if the value is too large or C<MIN> if the value is too small.  Either C<bytes> or C<min> and C<max> must be set.  C<bytes> takes precedence is both are set.

=head2 unsigned_decimal


=head2 signed_decimal


=head2 date

   * C<valid>: in addition to the common behaviour of C<valid> listed above, there are two key words which can be used.
      * C<past>: restricts the date to being before or equal to today's date.  Fails with type C<PAST>.
      * C<future>: restricts the date to being after today's date. Fails with type C<FUTURE>.
   * C<now>: A value in C<YYYY-MM-DD> form or a subroutine reference which returns the date in C<YYYY-MM-DD> form. This overrides the usage of C<localtime()> to determine today's date.
   * C<parser>: allows you to override the default date parser with one of your own choosing.  The subroutine is passed the parameter as the first argument and is expected to return C<($year,$month,$day)> or C<undef> if parsing fails.  The default parser takes dates in either C<MM/DD/YYYY> or C<YYYY-MM-DD> form.

Dates are translated into C<YYYY-MM-DD> form in the valid values hash.

=head2 time

   * C<min>: optionally sets the earliest allowed time.
   * C<max>: optionally sets the latest allowed time.

For example setting C<min> to 9:00, C<max> to 17:00 would make the range of acceptable times from 9:00 am to 5:00 pm.  Seconds are optional and assumed to be 0 if omitted.  Midnight is considered the boundary time. So setting C<min> to 9:00 would allow times between 9:00 and 23:59:59.  Setting C<max> to 15:00 would allow times between midnight and 15:00:00 (15:00::01 is invalid).

Fails with C<BAD> for things which don't appear to be times, C<MIN> for times before the minimum and C<MAX> for times later than the maximum.  Times are translated into military style C<HH:MM:SS>, ie. "1:05 p.m." becomes "13:05:00".

=head2 datetime

Combination of the C<date> and C<time> types into a single field.  Same rules from both still apply, be aware that it is possible to have failure messages for the same field.  For example if your configuration looks like this:

	a_datetime => {
	   'min' => '09:00',
	   'valid' => 'future',
	   'now' => '2009-01-01'
	}

a date of '2007-07-07 07:00' would produce two errors 'FUTURE_a_datetime' and 'MIN_a_datetime'.

If the time portion is omitted, midnight is assumed.

=head2 bit

The bit type is used to represent a simple yes/no flag and has no configuration options beyond the common ones.  True is validated against the regexp C</^(0*[1-9]\d*|y(es)?|t(rue?))$/i> and false is validated against the regexp C</^(0+|n(o)?|f(alse)?)$/i>.  The values is always returned as either C<0> or C<1> regardless of what values of true/false, yes/no were used.

Note that C<undef> is *NOT* false, this is so that the C<required> flag behaves consistently for all data types.

