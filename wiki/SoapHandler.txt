%META:TOPICINFO{author="BillWhite" date="1253278481" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="WebHome"}%
---+ !!Serving SOAP Requests
%TOC%

---++ Overview
Voodoo can handle serving soap requests to your applications in a nearly transparent manner.  Because of the number of differences in the way that requests are made for in a standard web browser type environment versus in a SOAP environment, Voodoo uses a separate Apache handler for dealing with SOAP requests.  Any application can be configured to either be accessible via Native HTTP, SOAP or both at once.

---++ Configuration 
First, install CPAN:SOAP::Lite.  When it comes to the configuration section be sure to set the option =Apache/mod_perl server= to yes.

Inside your =modperl-startup.pl= for Apache add the following:
<verbatim>
use Apache::Voodoo::Soap;
$Apache::Voodoo::Soap = Apache::Voodoo::Soap->new();
</verbatim>

You can either configure the handler to be attached to a virtual host or url path in same way that you can for the standard HTTP handler.
---+++ Example Virtual Host Configuration

<verbatim>
<VirtualHost *:80>
    ServerName soap.host.com
    DocumentRoot /data/apache/sites/my_app/html

    <Directory /data/apache/sites/my_app/html/>
         SetHandler modperl

         PerlResponseHandler $Apache::Voodoo::Soap->handler
         PerlSetVar ID my_app
    </Directory>
</VirtualHost>
</verbatim>

---+++ Example URL path Configuration
<verbatim>
    <Location /soap>
         SetHandler modperl

         PerlResponseHandler $Apache::Voodoo::Soap->handler
         PerlSetVar ID my_app
         PerlSetVar SiteRoot /soap
    </Location>
</verbatim>

Would make everything under /soap handled by the SOAP handler.  The =SiteRoot= parameter must match the value of the location.  This is necessary to deal with the fact that there isn't a good way from inside mod_perl to know if the URL that's being requested is part of a =Location= or =Alias= directive.

---++ Behavioural differences when dealing with SOAP

---+++ URL and Method Names
In the web environment there is only the URL to define what controller and method should be called within your application, in SOAP you have both a URL and a method.  The URL maps to the name of the controller, and the SOAP method is the same as the method in the controller.

|*web*| *soap* | *voodoo controller* |
|/foo/bar_index|/foo/index->bar()    | my_app::C::foo::index->bar()|
|/foo/index    |/foo/index->handle() | my_app::C::foo::index->handle()|

*NOTE* Even if you are running your application only under the SOAP handler, the rule concerning the existence of a =.tmpl= still applies.  See the [[ControllerAPI#URL_to_Controller_Method_Mapping][URL to Controller Method Mapping]] section of the ControllerAPI.

---+++ Parameter handling
The largest difference between the web and SOAP calls is in parameter handling.  With standard HTTP requests you always get key/value pairs, a SOAP method call can have any number of,
or types of parameters in any combination imaginable.  To help make your applications as unaware of their environment as possible, the parameters to the SOAP method get pre-processed
according to two rules.
   * any parameter which is a hash reference has its key value pairs inserted into =$p->{params}=.  Duplicated keys cause the value to be turned into an array reference and the new value appended.  This is in keeping with the way duplicate keys are handled in the web environment.
   * The original parameter list is stored verbatim as an array reference in =$p->{params}->{ARGV}=.

So, if you dictate that your services always take a single hash reference as the parameter, then =$p->{params}= will look the same for both web and SOAP requests.
Examples:
|* SOAP Parameters* | *$p->{params} Contents* |
|<verbatim>({ key => 'foo', key2 => 'bar' })</verbatim> | <verbatim>{
 key => 'foo',
 key2 => 'bar',
 ARGV => [
    { key => 'foo', key2 => 'bar}
 ]
}</verbatim>|
|<verbatim>({ key => 'foo'}, {key2 => 'bar' })</verbatim> | <verbatim>{
 key => 'foo',
 key2 => 'bar',
 ARGV => [
    { key => 'foo' },
    { key2 => 'bar' }
 ]
}</verbatim>|
|<verbatim>({ key => 'foo'}, {key2 => 'bar', key => 'baz' })</verbatim> | <verbatim>{
 key => ['foo', 'baz'],
 key2 => 'bar',
 ARGV => [
    { key => 'foo' },
    { key2 => 'bar', key => 'baz' }
 ]
}</verbatim>|
|<verbatim>(
 {key => 'foo'},
 [ 'a', 'b', {c => 'd'} ],
 {key2 => 'bar' }
)</verbatim> | <verbatim>{
 key => 'foo',
 key2 => 'bar',
 ARGV => [
    { key => 'foo' },
    [ 'a', 'b', {c => 'd'} ],
    { key2 => 'bar' }
 ]
}</verbatim>|
|<verbatim>(key => 'not', key2 => 'a', key3 => 'hash', key4 => 'ref')</verbatim>|<verbatim>{
 ARGV => [
   'key',
   'not',
   'key2',
   'a',
   'key3',
   'hash',
   'key4',
   'ref'
 ]
}</verbatim>|

---+++ Debugging
All the debugging methods inherited from Apache::Voodoo work as expected with some caveats for the Native and <nop>FirePHP debugging backends.  The <nop>Log4perl backend is not effected in any way by which environment it's in.

---++++ Native backend
All the debugging data is captured as usual, however it is not included in the SOAP response in any form.  See the [[InternalsDebugNative][Native Backend Internals]] for more details about how to access that data.

---++++ <nop>FirePHP backend
Doesn't do anything since, to my knowledge, there are no SOAP clients which support the [[http://www.firephp.org/Wiki/Reference/Protocol][FirePHP Protocol]].

---+++ Methods inherited from Apache::Voodoo
The following methods don't have a direct analog in the SOAP universe (for example SOAP has no concept of browser redirection), so they attempt to Acronym:DWIM as much as possible.

---++++ redirect($url)
Returns a CPAN:SOAP::Fault object with the following properties to the calling client
   * faultcode: 301
   * faultstring: Redirected
   * detail: $url

---++++ display_error($message, [$url])
Returns a CPAN:SOAP::Fault object with the following properties to the calling client
   * faultcode: 600
   * faultstring: $message
   * detail: { nextservice => $url }

---++++ access_denied($message)
Returns a CPAN:SOAP::Fault object with the following properties to the calling client
   * faultcode: 401
   * faultstring: $message
   * detail: undefined

---++++ exception($message)
Returns a CPAN:SOAP::Fault object with the following properties to the calling client
   * faultcode: 500
   * faultstring: $message

---++++ raw_mode($content_type,$data,[$headers])
Returns a soap message of the form
<verbatim>
{
   'error'        => 0,
   'success'      => 1,
   'rawdata'      => 1,
   'content-type' => $content_type,
   'headers'      => $headers,
   'data'         => $data
}
</verbatim>

---++++ set_view()
Silently does nothing

---+++ Views
The SOAP response itself is a view, and by nature of the SOAP protocol, the only one you get.  Any view objects loaded by the applications =voodoo.conf= file are inaccessible. The =default_view= directive in =template_conf= section doesn't do anything, and the =set_view()= silently does nothing.

---++ Client Cookie Handling
Soap clients need to accept and pass back http cookies with each request in order for sessions to work correctly.  You can enable cookie support for CPAN:SOAP::Lite using CPAN:HTTP::Cookies like this:

<verbatim>
$cookie_jar = HTTP::Cookies->new(ignore_discard => 1);

$soap_client->proxy('http://proxy.url', cookie_jar => $cookie_jar);
</verbatim>

Be sure to use one cookie jar object for all your soap client objects, otherwise the soap server will have multiple sessions which can not share information...this probably isn't what you want.

%META:REVCOMMENT{ncomments="0"}%
